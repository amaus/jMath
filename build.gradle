apply plugin: "maven-publish"
apply plugin: "maven"
apply plugin: "application" // implictly applies the java and distribution plugins

group = "com.aaronpmaus.jMath"
version '0.1.4'
// the default jar destinationDir is $buildDir/libs. Make it singular so that
// the executables made during the build phase will set their CLASSPATH correctly.
// The scripts generated by CreateStartScripts set the CLASSPATH by default to be
// ../lib/jMath-V.E.R.jar. This works great for the distributions which creates
// an archives with bin and lib directories in them, but I want the executables
// built during development to work as well.
project.jar.destinationDir = file("$buildDir/lib") // the default is $buildDir/libs

// create a task to zip the javadoc files
task zipJavadoc(type: Zip){
    from "$buildDir/docs/javadoc"
    classifier = 'javadoc'
    baseName = 'jMath'
}

task copyDepToLib(type: Copy){
    into "$buildDir/lib"
    from configurations.runtime
}

// install will require that the javadocs are generated and zipped. It will
// then publish them to the local maven repository along with the jar, and
// archives of the executables.
defaultTasks 'build'
zipJavadoc.dependsOn javadoc
install.dependsOn zipJavadoc, copyDepToLib
//build.dependsOn zipJavadoc
build.dependsOn copyDepToLib

// add the javadoc zip to the list of artifacts to be published in the maven repository
def javadocZip = file("$buildDir/distributions/jMath-$version"+"-javadoc.zip")
artifacts {
    archives javadocZip
}

repositories {
    mavenCentral()
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

//include the -Xlint compiler arg to all compiles
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile){
            options.compilerArgs << "-Xlint"
        }
    }
}

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Creates scripts for entry points
// Subproject must apply application plugin to be able to call this method.
def createScript(project, mainClass, name) {
  project.tasks.create(name: name, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'executables')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
  }
  project.tasks[name].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[name])
      fileMode = 0755
    }
  }
}

// The next two lines disable the tasks for the primary main which by default
// generates a script with a name matching the project name. 
// You can leave them enabled but if so you'll need to define mainClassName
// And you'll be creating your application scripts two different ways which 
// could lead to confusion
startScripts.enabled = false
run.enabled = false

// copy the current version of the jMath jar and rename it to be
// jMath.jar
installDist.doLast {
    String location = "$buildDir/install/jMath/lib/"
    String oldFileName = location+"jMath-$version"+".jar"
    String versionString = "-$version"
    copy {
        from oldFileName
        into location

        rename { String fileName ->
            fileName.replace(versionString,'')
        }

    }
}

// after the jar task is run create a copy of the jar and rename it to jMath.jar
jar.doLast {
    String location = "$buildDir/lib/"
    String oldFileName = location+"jMath-$version"+".jar"
    String versionString = "-$version"
    copy {
        from oldFileName
        into location

        rename { String fileName ->
            fileName.replace(versionString,'')
        }

    }
}

// Call this for each Main class you want to expose with an app script
createScript(project, 'com.aaronpmaus.jMath.executables.FindClique', 'FindClique')
createScript(project, 'com.aaronpmaus.jMath.executables.FindMaxClique', 'FindMaxClique')
