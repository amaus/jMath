apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "maven"
apply plugin: "application"

group = "com.aaronpmaus.jMath"
version '0.1.0'

repositories {
    mavenCentral()
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

//include the -Xlint compiler arg to all compiles
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile){
            options.compilerArgs << "-Xlint"
        }
    }
}

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Creates scripts for entry points
// Subproject must apply application plugin to be able to call this method.
def createScript(project, mainClass, name) {
  project.tasks.create(name: name, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'executables')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
  }
  project.tasks[name].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[name])
      fileMode = 0755
    }
  }
}

// The next two lines disable the tasks for the primary main which by default
// generates a script with a name matching the project name. 
// You can leave them enabled but if so you'll need to define mainClassName
// And you'll be creating your application scripts two different ways which 
// could lead to confusion
startScripts.enabled = false
run.enabled = false

// Call this for each Main class you want to expose with an app script
createScript(project, 'com.aaronpmaus.jMath.executables.FindClique', 'FindClique')
createScript(project, 'com.aaronpmaus.jMath.executables.FindMaxClique', 'FindMaxClique')
